package it.unisa.parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import it.unisa.ast.MyNode;
import it.unisa.ast.args.ArgsNode;
import it.unisa.ast.declaration.procedure.ProcedureDeclarationNode;
import it.unisa.ast.declaration.procedure.parameter.*;
import it.unisa.ast.declaration.variable.VarDeclarationNode;
import it.unisa.ast.expression.ExpressionNode;
import it.unisa.ast.expression.constant.*;
import it.unisa.ast.expression.identifier.IdentifierNode;
import it.unisa.ast.expression.operation.arithmetic.DivOpNode;
import it.unisa.ast.expression.operation.arithmetic.MinusOpNode;
import it.unisa.ast.expression.operation.arithmetic.PlusOpNode;
import it.unisa.ast.expression.operation.arithmetic.TimesOpNode;
import it.unisa.ast.expression.operation.bool.AndOpNode;
import it.unisa.ast.expression.operation.bool.OrOpNode;
import it.unisa.ast.expression.operation.relational.*;
import it.unisa.ast.expression.operation.unary.NotOpNode;
import it.unisa.ast.expression.operation.unary.UminusOpNode;
import it.unisa.ast.initialization.VarInitNode;
import it.unisa.ast.list.*;
import it.unisa.ast.programma.ProgrammaNode;
import it.unisa.ast.statement.*;
import it.unisa.ast.statement.conditional.IfThenElseOpNode;
import it.unisa.ast.statement.conditional.IfThenOpNode;
import it.unisa.ast.statement.conditional.WhileOpNode;
import it.unisa.ast.type.*;
import it.unisa.lexer.Yylex;

import java.util.LinkedHashSet;

/**
 * CUP v0.11b 20150930 (SVN rev 66) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return ParserSym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\074\000\002\002\004\000\002\002\006\000\002\003" +
                            "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
                            "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
                            "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
                            "\006\003\000\002\007\006\000\002\007\004\000\002\010" +
                            "\004\000\002\010\003\000\002\011\010\000\002\011\007" +
                            "\000\002\012\007\000\002\012\005\000\002\013\003\000" +
                            "\002\013\003\000\002\013\003\000\002\014\006\000\002" +
                            "\015\004\000\002\015\003\000\002\016\005\000\002\017" +
                            "\005\000\002\017\005\000\002\017\006\000\002\017\007" +
                            "\000\002\017\006\000\002\017\012\000\002\017\010\000" +
                            "\002\017\010\000\002\020\005\000\002\020\003\000\002" +
                            "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
                            "\005\000\002\021\004\000\002\021\005\000\002\021\005" +
                            "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
                            "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
                            "\021\005\000\002\021\003\000\002\021\003\000\002\021" +
                            "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
                            "\000\002\021\003\000\002\022\002"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\174\000\004\004\005\001\002\000\004\002\176\001" +
                            "\002\000\020\005\uffc6\007\007\010\010\011\014\012\012" +
                            "\013\020\016\017\001\002\000\004\015\166\001\002\000" +
                            "\004\015\ufff9\001\002\000\004\015\ufff8\001\002\000\020" +
                            "\005\uffc6\007\007\010\010\011\014\012\012\013\020\016" +
                            "\017\001\002\000\004\015\ufff6\001\002\000\004\005\ufffd" +
                            "\001\002\000\004\015\ufff7\001\002\000\020\005\uffc6\007" +
                            "\007\010\010\011\014\012\012\013\020\016\017\001\002" +
                            "\000\004\005\161\001\002\000\004\015\021\001\002\000" +
                            "\004\015\ufff5\001\002\000\004\017\022\001\002\000\012" +
                            "\020\030\023\024\024\023\025\026\001\002\000\014\007" +
                            "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\001\002\000\014" +
                            "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\001\002\000" +
                            "\014\007\007\010\010\011\014\012\012\013\020\001\002" +
                            "\000\014\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\001" +
                            "\002\000\004\020\153\001\002\000\004\021\031\001\002" +
                            "\000\046\007\007\010\010\011\014\012\012\013\020\015" +
                            "\uffc6\017\uffc6\022\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6" +
                            "\040\uffc6\041\uffc6\042\uffc6\044\uffc6\047\uffc6\056\uffc6\001" +
                            "\002\000\020\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
                            "\013\uffef\016\uffef\001\002\000\034\015\ufffb\017\ufffb\022" +
                            "\ufffb\031\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
                            "\042\ufffb\044\ufffb\047\ufffb\056\ufffb\001\002\000\034\015" +
                            "\052\017\045\022\uffc6\031\037\035\041\036\056\037\043" +
                            "\040\053\041\044\042\051\044\050\047\040\056\055\001" +
                            "\002\000\046\007\007\010\010\011\014\012\012\013\020" +
                            "\015\uffc6\017\uffc6\022\uffc6\031\uffc6\035\uffc6\036\uffc6\037" +
                            "\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\047\uffc6\056\uffc6" +
                            "\001\002\000\034\015\ufffc\017\ufffc\022\ufffc\031\ufffc\035" +
                            "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc" +
                            "\047\ufffc\056\ufffc\001\002\000\026\015\065\017\045\031" +
                            "\037\035\041\036\056\037\043\040\053\041\044\042\051" +
                            "\056\055\001\002\000\004\017\145\001\002\000\042\006" +
                            "\uffca\014\uffca\020\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
                            "\033\uffca\034\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
                            "\uffca\057\uffca\060\uffca\001\002\000\040\014\143\020\uffdc" +
                            "\026\uffdc\027\uffdc\030\071\031\067\033\076\034\075\051" +
                            "\074\052\070\053\077\054\073\055\072\057\066\060\100" +
                            "\001\002\000\042\006\uffc7\014\uffc7\020\uffc7\026\uffc7\027" +
                            "\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\051\uffc7\052\uffc7" +
                            "\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002\000" +
                            "\042\006\uffcd\014\uffcd\020\uffcd\026\uffcd\027\uffcd\030\uffcd" +
                            "\031\uffcd\033\uffcd\034\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
                            "\uffcd\055\uffcd\057\uffcd\060\uffcd\001\002\000\026\015\065" +
                            "\017\045\031\037\035\041\036\056\037\043\040\053\041" +
                            "\044\042\051\056\055\001\002\000\004\022\140\001\002" +
                            "\000\006\002\uffe7\022\uffe7\001\002\000\004\017\126\001" +
                            "\002\000\042\006\uffcc\014\uffcc\020\uffcc\026\uffcc\027\uffcc" +
                            "\030\uffcc\031\uffcc\033\uffcc\034\uffcc\051\uffcc\052\uffcc\053" +
                            "\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\001\002\000\042" +
                            "\014\uffcb\017\115\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
                            "\uffcb\034\uffcb\043\116\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
                            "\055\uffcb\057\uffcb\060\uffcb\001\002\000\042\006\uffc8\014" +
                            "\uffc8\020\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8" +
                            "\034\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057" +
                            "\uffc8\060\uffc8\001\002\000\036\002\uffc6\015\052\017\045" +
                            "\022\uffc6\031\037\035\041\036\056\037\043\040\053\041" +
                            "\044\042\051\044\050\047\040\056\055\001\002\000\026" +
                            "\015\065\017\045\031\037\035\041\036\056\037\043\040" +
                            "\053\041\044\042\051\056\055\001\002\000\042\006\uffc9" +
                            "\014\uffc9\020\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033" +
                            "\uffc9\034\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
                            "\057\uffc9\060\uffc9\001\002\000\006\026\060\027\061\001" +
                            "\002\000\004\006\063\001\002\000\004\006\062\001\002" +
                            "\000\036\002\uffe4\015\uffe4\017\uffe4\022\uffe4\031\uffe4\035" +
                            "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4" +
                            "\047\uffe4\056\uffe4\001\002\000\036\002\uffe5\015\uffe5\017" +
                            "\uffe5\022\uffe5\031\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
                            "\041\uffe5\042\uffe5\044\uffe5\047\uffe5\056\uffe5\001\002\000" +
                            "\042\006\uffd4\014\uffd4\020\uffd4\026\uffd4\027\uffd4\030\uffd4" +
                            "\031\uffd4\033\uffd4\034\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
                            "\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002\000\042\006\uffcb" +
                            "\014\uffcb\020\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
                            "\uffcb\034\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
                            "\057\uffcb\060\uffcb\001\002\000\026\015\065\017\045\031" +
                            "\037\035\041\036\056\037\043\040\053\041\044\042\051" +
                            "\056\055\001\002\000\026\015\065\017\045\031\037\035" +
                            "\041\036\056\037\043\040\053\041\044\042\051\056\055" +
                            "\001\002\000\026\015\065\017\045\031\037\035\041\036" +
                            "\056\037\043\040\053\041\044\042\051\056\055\001\002" +
                            "\000\026\015\065\017\045\031\037\035\041\036\056\037" +
                            "\043\040\053\041\044\042\051\056\055\001\002\000\026" +
                            "\015\065\017\045\031\037\035\041\036\056\037\043\040" +
                            "\053\041\044\042\051\056\055\001\002\000\026\015\065" +
                            "\017\045\031\037\035\041\036\056\037\043\040\053\041" +
                            "\044\042\051\056\055\001\002\000\026\015\065\017\045" +
                            "\031\037\035\041\036\056\037\043\040\053\041\044\042" +
                            "\051\056\055\001\002\000\026\015\065\017\045\031\037" +
                            "\035\041\036\056\037\043\040\053\041\044\042\051\056" +
                            "\055\001\002\000\026\015\065\017\045\031\037\035\041" +
                            "\036\056\037\043\040\053\041\044\042\051\056\055\001" +
                            "\002\000\026\015\065\017\045\031\037\035\041\036\056" +
                            "\037\043\040\053\041\044\042\051\056\055\001\002\000" +
                            "\026\015\065\017\045\031\037\035\041\036\056\037\043" +
                            "\040\053\041\044\042\051\056\055\001\002\000\042\006" +
                            "\uffd5\014\uffd5\020\uffd5\026\uffd5\027\uffd5\030\071\031\067" +
                            "\033\076\034\075\051\074\052\070\053\077\054\073\055" +
                            "\072\057\066\060\uffd5\001\002\000\042\006\uffd1\014\uffd1" +
                            "\020\uffd1\026\uffd1\027\uffd1\030\071\031\067\033\076\034" +
                            "\075\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1" +
                            "\060\uffd1\001\002\000\042\006\uffd9\014\uffd9\020\uffd9\026" +
                            "\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\051\uffd9" +
                            "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001" +
                            "\002\000\042\006\uffd8\014\uffd8\020\uffd8\026\uffd8\027\uffd8" +
                            "\030\uffd8\031\uffd8\033\uffd8\034\uffd8\051\uffd8\052\uffd8\053" +
                            "\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000\042" +
                            "\006\uffd3\014\uffd3\020\uffd3\026\uffd3\027\uffd3\030\071\031" +
                            "\067\033\076\034\075\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
                            "\055\uffd3\057\uffd3\060\uffd3\001\002\000\042\006\uffd0\014" +
                            "\uffd0\020\uffd0\026\uffd0\027\uffd0\030\071\031\067\033\076" +
                            "\034\075\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057" +
                            "\uffd0\060\uffd0\001\002\000\042\006\uffcf\014\uffcf\020\uffcf" +
                            "\026\uffcf\027\uffcf\030\071\031\067\033\076\034\075\051" +
                            "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf" +
                            "\001\002\000\042\006\uffdb\014\uffdb\020\uffdb\026\uffdb\027" +
                            "\uffdb\030\uffdb\031\uffdb\033\076\034\075\051\uffdb\052\uffdb" +
                            "\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\001\002\000" +
                            "\042\006\uffd2\014\uffd2\020\uffd2\026\uffd2\027\uffd2\030\071" +
                            "\031\067\033\076\034\075\051\uffd2\052\uffd2\053\uffd2\054" +
                            "\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\042\006\uffda" +
                            "\014\uffda\020\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033" +
                            "\076\034\075\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
                            "\057\uffda\060\uffda\001\002\000\042\006\uffd6\014\uffd6\020" +
                            "\uffd6\026\uffd6\027\uffd6\030\071\031\067\033\076\034\075" +
                            "\051\074\052\070\053\077\054\073\055\072\057\uffd6\060" +
                            "\uffd6\001\002\000\006\002\uffe8\022\uffe8\001\002\000\030" +
                            "\015\065\017\045\020\121\031\037\035\041\036\056\037" +
                            "\043\040\053\041\044\042\051\056\055\001\002\000\026" +
                            "\015\065\017\045\031\037\035\041\036\056\037\043\040" +
                            "\053\041\044\042\051\056\055\001\002\000\032\006\120" +
                            "\030\071\031\067\033\076\034\075\051\074\052\070\053" +
                            "\077\054\073\055\072\057\066\060\100\001\002\000\036" +
                            "\002\uffe3\015\uffe3\017\uffe3\022\uffe3\031\uffe3\035\uffe3\036" +
                            "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\047\uffe3" +
                            "\056\uffe3\001\002\000\004\006\125\001\002\000\004\020" +
                            "\123\001\002\000\004\006\124\001\002\000\036\002\uffe2" +
                            "\015\uffe2\017\uffe2\022\uffe2\031\uffe2\035\uffe2\036\uffe2\037" +
                            "\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\047\uffe2\056\uffe2" +
                            "\001\002\000\036\002\uffe1\015\uffe1\017\uffe1\022\uffe1\031" +
                            "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
                            "\044\uffe1\047\uffe1\056\uffe1\001\002\000\026\015\065\017" +
                            "\045\031\037\035\041\036\056\037\043\040\053\041\044" +
                            "\042\051\056\055\001\002\000\032\020\130\030\071\031" +
                            "\067\033\076\034\075\051\074\052\070\053\077\054\073" +
                            "\055\072\057\066\060\100\001\002\000\004\045\131\001" +
                            "\002\000\004\021\132\001\002\000\034\015\052\017\045" +
                            "\022\uffc6\031\037\035\041\036\056\037\043\040\053\041" +
                            "\044\042\051\044\050\047\040\056\055\001\002\000\040" +
                            "\002\uffdf\015\uffdf\017\uffdf\022\uffdf\031\uffdf\035\uffdf\036" +
                            "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\046\134" +
                            "\047\uffdf\056\uffdf\001\002\000\004\021\132\001\002\000" +
                            "\036\002\uffe0\015\uffe0\017\uffe0\022\uffe0\031\uffe0\035\uffe0" +
                            "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\047" +
                            "\uffe0\056\uffe0\001\002\000\004\022\137\001\002\000\040" +
                            "\002\uffe6\015\uffe6\017\uffe6\022\uffe6\031\uffe6\035\uffe6\036" +
                            "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\046\uffe6" +
                            "\047\uffe6\056\uffe6\001\002\000\020\005\uffe9\007\uffe9\010" +
                            "\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\001\002\000\032" +
                            "\020\142\030\071\031\067\033\076\034\075\051\074\052" +
                            "\070\053\077\054\073\055\072\057\066\060\100\001\002" +
                            "\000\042\006\uffce\014\uffce\020\uffce\026\uffce\027\uffce\030" +
                            "\uffce\031\uffce\033\uffce\034\uffce\051\uffce\052\uffce\053\uffce" +
                            "\054\uffce\055\uffce\057\uffce\060\uffce\001\002\000\026\015" +
                            "\065\017\045\031\037\035\041\036\056\037\043\040\053" +
                            "\041\044\042\051\056\055\001\002\000\010\020\uffdd\026" +
                            "\uffdd\027\uffdd\001\002\000\026\015\065\017\045\031\037" +
                            "\035\041\036\056\037\043\040\053\041\044\042\051\056" +
                            "\055\001\002\000\032\020\147\030\071\031\067\033\076" +
                            "\034\075\051\074\052\070\053\077\054\073\055\072\057" +
                            "\066\060\100\001\002\000\004\050\150\001\002\000\004" +
                            "\021\132\001\002\000\036\002\uffde\015\uffde\017\uffde\022" +
                            "\uffde\031\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
                            "\042\uffde\044\uffde\047\uffde\056\uffde\001\002\000\042\006" +
                            "\uffd7\014\uffd7\020\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
                            "\033\uffd7\034\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
                            "\uffd7\057\uffd7\060\uffd7\001\002\000\004\021\031\001\002" +
                            "\000\020\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
                            "\ufff0\016\ufff0\001\002\000\004\015\156\001\002\000\006" +
                            "\014\157\020\uffed\001\002\000\010\023\024\024\023\025" +
                            "\026\001\002\000\004\020\uffee\001\002\000\034\002\uffc6" +
                            "\015\052\017\045\031\037\035\041\036\056\037\043\040" +
                            "\053\041\044\042\051\044\050\047\040\056\055\001\002" +
                            "\000\004\002\000\001\002\000\004\005\uffff\001\002\000" +
                            "\004\005\ufffe\001\002\000\004\006\175\001\002\000\010" +
                            "\006\uffc6\014\uffc6\043\171\001\002\000\006\006\ufff3\014" +
                            "\173\001\002\000\006\006\ufff1\014\ufff1\001\002\000\026" +
                            "\015\065\017\045\031\037\035\041\036\056\037\043\040" +
                            "\053\041\044\042\051\056\055\001\002\000\034\006\ufff2" +
                            "\014\ufff2\030\071\031\067\033\076\034\075\051\074\052" +
                            "\070\053\077\054\073\055\072\057\066\060\100\001\002" +
                            "\000\004\015\166\001\002\000\004\006\ufff4\001\002\000" +
                            "\052\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
                            "\015\ufffa\016\ufffa\017\ufffa\022\ufffa\031\ufffa\035\ufffa\036" +
                            "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\044\ufffa\047\ufffa" +
                            "\056\ufffa\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\174\000\004\002\003\001\001\000\002\001\001\000" +
                            "\014\003\015\005\014\006\005\011\010\022\012\001\001" +
                            "\000\004\007\164\001\001\000\002\001\001\000\002\001" +
                            "\001\000\014\003\163\005\014\006\005\011\010\022\012" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\014\003\162\005\014\006\005\011\010\022\012" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\012\026\013\024\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\006\154\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\014\031" +
                            "\001\001\000\012\004\033\005\034\006\005\022\032\001" +
                            "\001\000\002\001\001\000\002\001\001\000\014\015\045" +
                            "\017\053\020\056\021\041\022\046\001\001\000\012\004" +
                            "\035\005\034\006\005\022\032\001\001\000\002\001\001" +
                            "\000\004\021\151\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\021\140\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\014\015\113\017\053\020\056\021" +
                            "\041\022\046\001\001\000\004\021\063\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\021\112\001\001\000\004\021" +
                            "\111\001\001\000\004\021\110\001\001\000\004\021\107" +
                            "\001\001\000\004\021\106\001\001\000\004\021\105\001" +
                            "\001\000\004\021\104\001\001\000\004\021\103\001\001" +
                            "\000\004\021\102\001\001\000\004\021\101\001\001\000" +
                            "\004\021\100\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\020\121\021\041\001\001\000\004\021\116" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\021\126\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\016\132\001\001\000\014" +
                            "\015\135\017\053\020\056\021\041\022\046\001\001\000" +
                            "\002\001\001\000\004\016\134\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\020\143\021\041" +
                            "\001\001\000\002\001\001\000\004\021\145\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\016\150\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\014\153\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\006\012\157\013\024\001\001\000\002\001\001\000" +
                            "\014\015\161\017\053\020\056\021\041\022\046\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\010\166\022\167\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\021\171\001\001\000" +
                            "\002\001\001\000\004\007\173\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return lexer.next_token();
    }


    // Connect the generated parser to your lexer!
    private Yylex lexer;

    public Parser(Yylex lexer) {
        this.lexer = lexer;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= Programma EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    ProgrammaNode start_val = (ProgrammaNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // Programma ::= HEAD Decls START Statements
                {
                    ProgrammaNode RESULT = null;
                    int dleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int dright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    DeclarationListNode d = (DeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StatementListNode s = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ProgrammaNode p = new ProgrammaNode();
                    p.add(d);
                    p.add(s);
                    RESULT = p;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // Decls ::= Var_decl Decls
                {
                    DeclarationListNode RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    VarDeclarationNode v = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    DeclarationListNode l = (DeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    DeclarationListNode n = new DeclarationListNode();
                    n.add(v);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // Decls ::= Def_decl Decls
                {
                    DeclarationListNode RESULT = null;
                    int dleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int dright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    ProcedureDeclarationNode d = (ProcedureDeclarationNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    DeclarationListNode l = (DeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    DeclarationListNode n = new DeclarationListNode();
                    n.add(d);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // Decls ::= empty
                {
                    DeclarationListNode RESULT = null;
                    RESULT = new DeclarationListNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // Var_decls ::= Var_decl Var_decls
                {
                    VarDeclarationListNode RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    VarDeclarationNode v = (VarDeclarationNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    VarDeclarationListNode l = (VarDeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    VarDeclarationListNode n = new VarDeclarationListNode();
                    n.add(v);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // Var_decls ::= empty
                {
                    VarDeclarationListNode RESULT = null;
                    RESULT = new VarDeclarationListNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // Var_decl ::= Type Var_decls_init SEMI
                {
                    VarDeclarationNode RESULT = null;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    TypeNode t = (TypeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int ileft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int iright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    VarInitListNode i = (VarInitListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    VarDeclarationNode v = new VarDeclarationNode();
                    v.add(t);
                    v.add(i);
                    RESULT = v;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decl", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // Type ::= INT
                {
                    TypeNode RESULT = null;
                    RESULT = new IntegerNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // Type ::= BOOL
                {
                    TypeNode RESULT = null;
                    RESULT = new BooleanNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // Type ::= DOUBLE
                {
                    TypeNode RESULT = null;
                    RESULT = new DoubleNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // Type ::= STRING
                {
                    TypeNode RESULT = null;
                    RESULT = new StringNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // Type ::= CHAR
                {
                    TypeNode RESULT = null;
                    RESULT = new CharacterNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // Var_decls_init ::= ID Var_init_value COMMA Var_decls_init
                {
                    VarInitListNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int ivleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int ivright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    VarInitNode iv = (VarInitNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    VarInitListNode l = (VarInitListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    VarInitListNode n = new VarInitListNode();
                    VarInitNode vin = new VarInitNode();
                    vin.add(new IdentifierNode(id));
                    if (!iv.subtrees().isEmpty()) {
                        vin.addSubtrees((LinkedHashSet<MyNode>) iv.subtrees());
                    }
                    n.add(vin);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // Var_decls_init ::= ID Var_init_value
                {
                    VarInitListNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int ivleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int ivright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    VarInitNode iv = (VarInitNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    VarInitListNode n = new VarInitListNode();
                    VarInitNode vin = new VarInitNode();
                    vin.add(new IdentifierNode(id));
                    if (!iv.subtrees().isEmpty()) {
                        vin.addSubtrees((LinkedHashSet<MyNode>) iv.subtrees());
                    }
                    n.add(vin);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls_init", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // Var_init_value ::= ASSIGN Expr
                {
                    VarInitNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    VarInitNode n = new VarInitNode();
                    n.add(e);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // Var_init_value ::= empty
                {
                    VarInitNode RESULT = null;
                    RESULT = new VarInitNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // Def_decl ::= DEF ID LPAR Par_decls RPAR Body
                {
                    ProcedureDeclarationNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int pleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int pright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ParDeclarationListNode p = (ParDeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BodyNode b = (BodyNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ProcedureDeclarationNode n = new ProcedureDeclarationNode();
                    n.add(new IdentifierNode(id));
                    n.add(p);
                    n.add(b);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // Def_decl ::= DEF ID LPAR RPAR Body
                {
                    ProcedureDeclarationNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    BodyNode b = (BodyNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ProcedureDeclarationNode n = new ProcedureDeclarationNode();
                    n.add(new IdentifierNode(id));
                    n.add(new ParDeclarationListNode());
                    n.add(b);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_decl", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // Par_decls ::= Par_type Type ID COMMA Par_decls
                {
                    ParDeclarationListNode RESULT = null;
                    int ptleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int ptright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    ParTypeNode pt = (ParTypeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    TypeNode t = (TypeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ParDeclarationListNode l = (ParDeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ParDeclarationNode p = new ParDeclarationNode();
                    p.add(pt);
                    p.add(t);
                    p.add(new IdentifierNode(id));
                    ParDeclarationListNode n = new ParDeclarationListNode();
                    n.add(p);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // Par_decls ::= Par_type Type ID
                {
                    ParDeclarationListNode RESULT = null;
                    int ptleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int ptright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ParTypeNode pt = (ParTypeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int tleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int tright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    TypeNode t = (TypeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ParDeclarationNode p = new ParDeclarationNode();
                    p.add(pt);
                    p.add(t);
                    p.add(new IdentifierNode(id));
                    ParDeclarationListNode n = new ParDeclarationListNode();
                    n.add(p);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // Par_type ::= IN
                {
                    ParTypeNode RESULT = null;
                    RESULT = new InNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // Par_type ::= OUT
                {
                    ParTypeNode RESULT = null;
                    RESULT = new OutNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // Par_type ::= INOUT
                {
                    ParTypeNode RESULT = null;
                    RESULT = new InOutNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_type", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // Body ::= LGPAR Var_decls Statements RGPAR
                {
                    BodyNode RESULT = null;
                    int vleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int vright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    VarDeclarationListNode v = (VarDeclarationListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StatementListNode s = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    BodyNode n = new BodyNode();
                    n.add(v);
                    n.add(s);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // Statements ::= Stat Statements
                {
                    StatementListNode RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StatementNode s = (StatementNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StatementListNode l = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    StatementListNode n = new StatementListNode();
                    n.add(s);
                    if (!l.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) l.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // Statements ::= empty
                {
                    StatementListNode RESULT = null;
                    RESULT = new StatementListNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // Comp_stat ::= LGPAR Statements RGPAR
                {
                    StatementListNode RESULT = null;
                    int lleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int lright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    StatementListNode l = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = l;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comp_stat", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // Stat ::= Args READ SEMI
                {
                    StatementNode RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ArgsNode a = (ArgsNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    ReadOpNode n = new ReadOpNode();
                    n.add(a);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // Stat ::= Args WRITE SEMI
                {
                    StatementNode RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ArgsNode a = (ArgsNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    WriteOpNode n = new WriteOpNode();
                    n.add(a);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // Stat ::= ID ASSIGN Expr SEMI
                {
                    StatementNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    AssignOpNode n = new AssignOpNode();
                    n.add(new IdentifierNode(id));
                    n.add(e);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // Stat ::= ID LPAR Args RPAR SEMI
                {
                    StatementNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ArgsNode a = (ArgsNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    CallOpNode n = new CallOpNode();
                    n.add(new IdentifierNode(id));
                    n.add(a);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // Stat ::= ID LPAR RPAR SEMI
                {
                    StatementNode RESULT = null;
                    int idleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int idright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    CallOpNode n = new CallOpNode();
                    n.add(new IdentifierNode(id));
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat ELSE Comp_stat
                {
                    StatementNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int c1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int c1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    StatementListNode c1 = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int c2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int c2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StatementListNode c2 = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    IfThenElseOpNode n = new IfThenElseOpNode();
                    n.add(e);
                    n.add(c1);
                    n.add(c2);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // Stat ::= IF LPAR Expr RPAR THEN Comp_stat
                {
                    StatementNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StatementListNode c = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    IfThenOpNode n = new IfThenOpNode();
                    n.add(e);
                    n.add(c);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // Stat ::= WHILE LPAR Expr RPAR DO Comp_stat
                {
                    StatementNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int cleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int cright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    StatementListNode c = (StatementListNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    WhileOpNode n = new WhileOpNode();
                    n.add(e);
                    n.add(c);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // Args ::= Expr COMMA Args
                {
                    ArgsNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ArgsNode a = (ArgsNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ArgsNode n = new ArgsNode();
                    n.add(e);
                    if (!a.subtrees().isEmpty()) {
                        n.addSubtrees((LinkedHashSet<MyNode>) a.subtrees());
                    }
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // Args ::= Expr
                {
                    ArgsNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    ArgsNode n = new ArgsNode();
                    n.add(e);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Args", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // Expr ::= Expr PLUS Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    PlusOpNode op = new PlusOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // Expr ::= Expr MINUS Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    MinusOpNode op = new MinusOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // Expr ::= Expr TIMES Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    TimesOpNode op = new TimesOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // Expr ::= Expr DIV Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    DivOpNode op = new DivOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // Expr ::= MINUS Expr
                {
                    ExpressionNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    UminusOpNode n = new UminusOpNode();
                    n.add(e);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // Expr ::= Expr AND Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    AndOpNode op = new AndOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // Expr ::= Expr OR Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    OrOpNode op = new OrOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // Expr ::= NOT Expr
                {
                    ExpressionNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    NotOpNode n = new NotOpNode();
                    n.add(e);
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // Expr ::= Expr GT Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    GTOpNode op = new GTOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // Expr ::= Expr GE Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    GEOpNode op = new GEOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // Expr ::= Expr LT Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    LTOpNode op = new LTOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // Expr ::= Expr LE Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    LEOpNode op = new LEOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // Expr ::= Expr EQ Expr
                {
                    ExpressionNode RESULT = null;
                    int e1left = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    ExpressionNode e1 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    ExpressionNode e2 = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    EQOpNode op = new EQOpNode();
                    op.add(e1);
                    op.add(e2);
                    RESULT = op;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // Expr ::= LPAR Expr RPAR
                {
                    ExpressionNode RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    ExpressionNode e = (ExpressionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // Expr ::= TRUE
                {
                    ExpressionNode RESULT = null;
                    RESULT = new TrueNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // Expr ::= FALSE
                {
                    ExpressionNode RESULT = null;
                    RESULT = new FalseNode();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // Expr ::= ID
                {
                    ExpressionNode RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String value = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new IdentifierNode(value);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // Expr ::= INT_CONST
                {
                    ExpressionNode RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Integer value = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new IntegerConstantNode(value);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // Expr ::= DOUBLE_CONST
                {
                    ExpressionNode RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Double value = (Double) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DoubleConstantNode(value);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // Expr ::= CHAR_CONST
                {
                    ExpressionNode RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    Character value = (Character) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new CharConstantNode(value);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // Expr ::= STRING_CONST
                {
                    ExpressionNode RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String value = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StringConstantNode(value);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // empty ::=
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
